
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 19 16:19:08 PST 2016
//----------------------------------------------------

package com.gmail.devinz1993.smallc.frontend;

import java.io.InputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 19 16:19:08 PST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\002\000\002\006\007\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\006\002\000\002\007" +
    "\007\000\002\007\006\000\002\007\004\000\002\010\006" +
    "\000\002\011\006\000\002\011\004\000\002\011\002\000" +
    "\002\012\006\000\002\013\004\000\002\013\002\000\002" +
    "\014\004\000\002\014\003\000\002\014\005\000\002\014" +
    "\011\000\002\014\007\000\002\014\013\000\002\014\004" +
    "\000\002\014\004\000\002\015\006\000\002\015\006\000" +
    "\002\015\002\000\002\016\006\000\002\016\002\000\002" +
    "\017\005\000\002\017\003\000\002\020\007\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\003" +
    "\000\002\021\006\000\002\022\003\000\002\022\005\000" +
    "\002\023\003\000\002\023\002\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\005\000\002\024\006\000\002\024\003\000\002\025\004" +
    "\000\002\025\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\004\000\002\031" +
    "\006\000\002\031\002\000\002\032\005\000\002\032\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\010\002\ufffe\052\011\053\007\001\002\000" +
    "\004\002\000\001\002\000\006\004\277\057\ufff8\001\002" +
    "\000\010\002\ufffe\052\011\053\007\001\002\000\006\004" +
    "\263\061\264\001\002\000\004\002\262\001\002\000\006" +
    "\004\013\057\ufff3\001\002\000\004\061\200\001\002\000" +
    "\014\036\uffd5\057\uffd5\060\uffd5\064\170\066\uffd5\001\002" +
    "\000\012\036\021\057\ufff4\060\017\066\020\001\002\000" +
    "\004\057\016\001\002\000\010\002\ufffd\052\ufffd\053\ufffd" +
    "\001\002\000\006\004\136\057\ufff3\001\002\000\004\010" +
    "\165\001\002\000\030\004\032\010\026\011\034\012\027" +
    "\013\023\014\041\051\022\057\uffd0\060\uffd0\061\031\064" +
    "\025\001\002\000\022\004\032\010\026\011\034\012\027" +
    "\013\023\014\041\051\022\064\025\001\002\000\022\004" +
    "\032\010\026\011\034\012\027\013\023\014\041\051\022" +
    "\064\025\001\002\000\060\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\051\uffce\057\uffce\060\uffce\062\uffce\065\uffce\067\uffce" +
    "\001\002\000\022\004\032\010\026\011\034\012\027\013" +
    "\023\014\041\051\022\064\025\001\002\000\060\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\051\uffc9\057\uffc9\060\uffc9\062" +
    "\uffc9\065\uffc9\067\uffc9\001\002\000\022\004\032\010\026" +
    "\011\034\012\027\013\023\014\041\051\022\064\025\001" +
    "\002\000\060\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\051\uffcc" +
    "\057\uffcc\060\uffcc\062\uffcc\065\uffcc\067\uffcc\001\002\000" +
    "\026\004\032\010\026\011\034\012\027\013\023\014\041" +
    "\051\022\060\uffd0\062\uffd0\064\025\001\002\000\114\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\057\uffa3\060\uffa3\062\uffa3\063\144" +
    "\064\141\065\uffa3\066\143\067\uffa3\001\002\000\060\015" +
    "\051\016\045\017\061\020\064\021\044\022\063\023\047" +
    "\024\053\025\046\026\052\027\055\030\057\031\054\032" +
    "\050\033\056\034\060\035\043\051\062\057\uffd1\060\uffd1" +
    "\062\uffd1\065\uffd1\067\uffd1\001\002\000\022\004\032\010" +
    "\026\011\034\012\027\013\023\014\041\051\022\064\025" +
    "\001\002\000\006\057\ufff5\060\135\001\002\000\006\057" +
    "\uffd3\060\uffd3\001\002\000\060\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\051\uffcd\057\uffcd\060\uffcd\062\uffcd\065\uffcd\067" +
    "\uffcd\001\002\000\106\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\116\037\115\040\110\041\121\042\113\043\117\044" +
    "\114\045\107\046\120\047\111\050\112\051\uffcf\057\uffcf" +
    "\060\uffcf\062\uffcf\065\uffcf\067\uffcf\001\002\000\022\004" +
    "\032\010\026\011\034\012\027\013\023\014\041\051\022" +
    "\064\025\001\002\000\060\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\051\uffa5\057\uffa5\060\uffa5\062\uffa5\065\uffa5\067\uffa5" +
    "\001\002\000\022\004\032\010\026\011\034\012\027\013" +
    "\023\014\041\051\022\064\025\001\002\000\022\004\032" +
    "\010\026\011\034\012\027\013\023\014\041\051\022\064" +
    "\025\001\002\000\022\004\032\010\026\011\034\012\027" +
    "\013\023\014\041\051\022\064\025\001\002\000\022\004" +
    "\032\010\026\011\034\012\027\013\023\014\041\051\022" +
    "\064\025\001\002\000\022\004\032\010\026\011\034\012" +
    "\027\013\023\014\041\051\022\064\025\001\002\000\022" +
    "\004\032\010\026\011\034\012\027\013\023\014\041\051" +
    "\022\064\025\001\002\000\022\004\032\010\026\011\034" +
    "\012\027\013\023\014\041\051\022\064\025\001\002\000" +
    "\022\004\032\010\026\011\034\012\027\013\023\014\041" +
    "\051\022\064\025\001\002\000\022\004\032\010\026\011" +
    "\034\012\027\013\023\014\041\051\022\064\025\001\002" +
    "\000\022\004\032\010\026\011\034\012\027\013\023\014" +
    "\041\051\022\064\025\001\002\000\022\004\032\010\026" +
    "\011\034\012\027\013\023\014\041\051\022\064\025\001" +
    "\002\000\022\004\032\010\026\011\034\012\027\013\023" +
    "\014\041\051\022\064\025\001\002\000\022\004\032\010" +
    "\026\011\034\012\027\013\023\014\041\051\022\064\025" +
    "\001\002\000\022\004\032\010\026\011\034\012\027\013" +
    "\023\014\041\051\022\064\025\001\002\000\022\004\032" +
    "\010\026\011\034\012\027\013\023\014\041\051\022\064" +
    "\025\001\002\000\022\004\032\010\026\011\034\012\027" +
    "\013\023\014\041\051\022\064\025\001\002\000\022\004" +
    "\032\010\026\011\034\012\027\013\023\014\041\051\022" +
    "\064\025\001\002\000\022\004\032\010\026\011\034\012" +
    "\027\013\023\014\041\051\022\064\025\001\002\000\060" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\044\022\063\023" +
    "\047\024\053\025\046\026\052\027\055\030\057\031\054" +
    "\032\050\033\056\034\060\035\043\051\062\057\uffb8\060" +
    "\uffb8\062\uffb8\065\uffb8\067\uffb8\001\002\000\060\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\053\025\046\026\052\027\055\030\057\031\054\032\050" +
    "\033\056\034\060\035\043\051\062\057\uffb5\060\uffb5\062" +
    "\uffb5\065\uffb5\067\uffb5\001\002\000\060\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\056" +
    "\034\060\035\043\051\uffad\057\uffad\060\uffad\062\uffad\065" +
    "\uffad\067\uffad\001\002\000\060\015\uffb9\016\uffb9\017\uffb9" +
    "\020\064\021\044\022\063\023\047\024\053\025\046\026" +
    "\052\027\055\030\057\031\054\032\050\033\056\034\060" +
    "\035\043\051\062\057\uffb9\060\uffb9\062\uffb9\065\uffb9\067" +
    "\uffb9\001\002\000\060\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\051\uffab\057\uffab\060\uffab\062\uffab\065\uffab\067\uffab\001" +
    "\002\000\060\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\050\033\056\034\060\035\043\051\062" +
    "\057\uffb0\060\uffb0\062\uffb0\065\uffb0\067\uffb0\001\002\000" +
    "\060\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\051\uffac\057\uffac" +
    "\060\uffac\062\uffac\065\uffac\067\uffac\001\002\000\060\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\057\031\054\032" +
    "\050\033\056\034\060\035\043\051\062\057\uffb2\060\uffb2" +
    "\062\uffb2\065\uffb2\067\uffb2\001\002\000\060\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\050\033" +
    "\056\034\060\035\043\051\062\057\uffaf\060\uffaf\062\uffaf" +
    "\065\uffaf\067\uffaf\001\002\000\060\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\057\031\054\032\050\033\056\034" +
    "\060\035\043\051\062\057\uffb4\060\uffb4\062\uffb4\065\uffb4" +
    "\067\uffb4\001\002\000\060\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\057\031\054\032\050\033\056\034\060\035" +
    "\043\051\062\057\uffb1\060\uffb1\062\uffb1\065\uffb1\067\uffb1" +
    "\001\002\000\060\015\uffbb\016\045\017\061\020\064\021" +
    "\044\022\063\023\047\024\053\025\046\026\052\027\055" +
    "\030\057\031\054\032\050\033\056\034\060\035\043\051" +
    "\062\057\uffbb\060\uffbb\062\uffbb\065\uffbb\067\uffbb\001\002" +
    "\000\060\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\056\034\060\035\043\051\uffae\057" +
    "\uffae\060\uffae\062\uffae\065\uffae\067\uffae\001\002\000\060" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\053\025\046\026\052\027\055\030\057\031\054" +
    "\032\050\033\056\034\060\035\043\051\062\057\uffb6\060" +
    "\uffb6\062\uffb6\065\uffb6\067\uffb6\001\002\000\060\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\057\031\054\032\050" +
    "\033\056\034\060\035\043\051\062\057\uffb3\060\uffb3\062" +
    "\uffb3\065\uffb3\067\uffb3\001\002\000\060\015\uffba\016\uffba" +
    "\017\061\020\064\021\044\022\063\023\047\024\053\025" +
    "\046\026\052\027\055\030\057\031\054\032\050\033\056" +
    "\034\060\035\043\051\062\057\uffba\060\uffba\062\uffba\065" +
    "\uffba\067\uffba\001\002\000\060\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\063\023\047\024\053\025\046\026" +
    "\052\027\055\030\057\031\054\032\050\033\056\034\060" +
    "\035\043\051\062\057\uffb7\060\uffb7\062\uffb7\065\uffb7\067" +
    "\uffb7\001\002\000\060\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\051\uffaa\057\uffaa\060\uffaa\062\uffaa\065\uffaa\067\uffaa\001" +
    "\002\000\022\004\032\010\026\011\034\012\027\013\023" +
    "\014\041\051\022\064\025\001\002\000\022\004\032\010" +
    "\026\011\034\012\027\013\023\014\041\051\022\064\025" +
    "\001\002\000\022\004\032\010\026\011\034\012\027\013" +
    "\023\014\041\051\022\064\025\001\002\000\022\004\032" +
    "\010\026\011\034\012\027\013\023\014\041\051\022\064" +
    "\025\001\002\000\022\004\032\010\026\011\034\012\027" +
    "\013\023\014\041\051\022\064\025\001\002\000\022\004" +
    "\032\010\026\011\034\012\027\013\023\014\041\051\022" +
    "\064\025\001\002\000\022\004\032\010\026\011\034\012" +
    "\027\013\023\014\041\051\022\064\025\001\002\000\022" +
    "\004\032\010\026\011\034\012\027\013\023\014\041\051" +
    "\022\064\025\001\002\000\022\004\032\010\026\011\034" +
    "\012\027\013\023\014\041\051\022\064\025\001\002\000" +
    "\022\004\032\010\026\011\034\012\027\013\023\014\041" +
    "\051\022\064\025\001\002\000\022\004\032\010\026\011" +
    "\034\012\027\013\023\014\041\051\022\064\025\001\002" +
    "\000\060\015\051\016\045\017\061\020\064\021\044\022" +
    "\063\023\047\024\053\025\046\026\052\027\055\030\057" +
    "\031\054\032\050\033\056\034\060\035\043\051\062\057" +
    "\uffc3\060\uffc3\062\uffc3\065\uffc3\067\uffc3\001\002\000\060" +
    "\015\051\016\045\017\061\020\064\021\044\022\063\023" +
    "\047\024\053\025\046\026\052\027\055\030\057\031\054" +
    "\032\050\033\056\034\060\035\043\051\062\057\uffbe\060" +
    "\uffbe\062\uffbe\065\uffbe\067\uffbe\001\002\000\060\015\051" +
    "\016\045\017\061\020\064\021\044\022\063\023\047\024" +
    "\053\025\046\026\052\027\055\030\057\031\054\032\050" +
    "\033\056\034\060\035\043\051\062\057\uffc1\060\uffc1\062" +
    "\uffc1\065\uffc1\067\uffc1\001\002\000\060\015\051\016\045" +
    "\017\061\020\064\021\044\022\063\023\047\024\053\025" +
    "\046\026\052\027\055\030\057\031\054\032\050\033\056" +
    "\034\060\035\043\051\062\057\uffc6\060\uffc6\062\uffc6\065" +
    "\uffc6\067\uffc6\001\002\000\060\015\051\016\045\017\061" +
    "\020\064\021\044\022\063\023\047\024\053\025\046\026" +
    "\052\027\055\030\057\031\054\032\050\033\056\034\060" +
    "\035\043\051\062\057\uffc5\060\uffc5\062\uffc5\065\uffc5\067" +
    "\uffc5\001\002\000\060\015\051\016\045\017\061\020\064" +
    "\021\044\022\063\023\047\024\053\025\046\026\052\027" +
    "\055\030\057\031\054\032\050\033\056\034\060\035\043" +
    "\051\062\057\uffc0\060\uffc0\062\uffc0\065\uffc0\067\uffc0\001" +
    "\002\000\060\015\051\016\045\017\061\020\064\021\044" +
    "\022\063\023\047\024\053\025\046\026\052\027\055\030" +
    "\057\031\054\032\050\033\056\034\060\035\043\051\062" +
    "\057\uffc2\060\uffc2\062\uffc2\065\uffc2\067\uffc2\001\002\000" +
    "\060\015\051\016\045\017\061\020\064\021\044\022\063" +
    "\023\047\024\053\025\046\026\052\027\055\030\057\031" +
    "\054\032\050\033\056\034\060\035\043\051\062\057\uffbc" +
    "\060\uffbc\062\uffbc\065\uffbc\067\uffbc\001\002\000\060\015" +
    "\051\016\045\017\061\020\064\021\044\022\063\023\047" +
    "\024\053\025\046\026\052\027\055\030\057\031\054\032" +
    "\050\033\056\034\060\035\043\051\062\057\uffbd\060\uffbd" +
    "\062\uffbd\065\uffbd\067\uffbd\001\002\000\060\015\051\016" +
    "\045\017\061\020\064\021\044\022\063\023\047\024\053" +
    "\025\046\026\052\027\055\030\057\031\054\032\050\033" +
    "\056\034\060\035\043\051\062\057\uffc4\060\uffc4\062\uffc4" +
    "\065\uffc4\067\uffc4\001\002\000\060\015\051\016\045\017" +
    "\061\020\064\021\044\022\063\023\047\024\053\025\046" +
    "\026\052\027\055\030\057\031\054\032\050\033\056\034" +
    "\060\035\043\051\062\057\uffbf\060\uffbf\062\uffbf\065\uffbf" +
    "\067\uffbf\001\002\000\006\004\136\057\ufff3\001\002\000" +
    "\012\036\uffd5\057\uffd5\060\uffd5\066\uffd5\001\002\000\004" +
    "\057\ufff7\001\002\000\060\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\051\uffa6\057\uffa6\060\uffa6\062\uffa6\065\uffa6\067\uffa6" +
    "\001\002\000\026\004\032\010\026\011\034\012\027\013" +
    "\023\014\041\051\022\060\uffd0\064\025\065\uffd0\001\002" +
    "\000\106\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\057\uffc8\060\uffc8\062" +
    "\uffc8\065\uffc8\067\uffc8\001\002\000\024\004\032\010\026" +
    "\011\034\012\027\013\023\014\041\051\022\064\025\067" +
    "\uffd0\001\002\000\004\004\145\001\002\000\106\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\057\uffc7\060\uffc7\062\uffc7\065\uffc7\067" +
    "\uffc7\001\002\000\004\067\147\001\002\000\110\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\057\uffa3\060\uffa3\062\uffa3\065\uffa3\066" +
    "\143\067\uffa3\001\002\000\106\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\057\uffa4\060\uffa4\062\uffa4\065\uffa4\067\uffa4\001\002\000" +
    "\004\065\155\001\002\000\010\060\153\062\uffa1\065\uffa1" +
    "\001\002\000\030\004\032\010\026\011\034\012\027\013" +
    "\023\014\041\051\022\060\uffd0\062\uffd0\064\025\065\uffd0" +
    "\001\002\000\006\062\uffa2\065\uffa2\001\002\000\060\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\051\uffca\057\uffca\060\uffca" +
    "\062\uffca\065\uffca\067\uffca\001\002\000\004\062\157\001" +
    "\002\000\006\057\uffd2\060\uffd2\001\002\000\060\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\051\uffa9\057\uffa9\060\uffa9\062" +
    "\uffa9\065\uffa9\067\uffa9\001\002\000\050\015\051\016\045" +
    "\017\061\020\064\021\044\022\063\023\047\024\053\025" +
    "\046\026\052\027\055\030\057\031\054\032\050\033\056" +
    "\034\060\035\043\051\062\065\162\001\002\000\060\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\051\uffcb\057\uffcb\060\uffcb" +
    "\062\uffcb\065\uffcb\067\uffcb\001\002\000\060\015\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\051\uffa8\057\uffa8\060\uffa8\062\uffa8" +
    "\065\uffa8\067\uffa8\001\002\000\060\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\051\uffa7\057\uffa7\060\uffa7\062\uffa7\065\uffa7" +
    "\067\uffa7\001\002\000\004\067\166\001\002\000\012\036" +
    "\uffd4\057\uffd4\060\uffd4\066\uffd4\001\002\000\004\057\ufff6" +
    "\001\002\000\006\052\172\065\uffec\001\002\000\004\065" +
    "\176\001\002\000\004\004\173\001\002\000\006\060\174" +
    "\065\uffed\001\002\000\006\052\172\065\uffec\001\002\000" +
    "\004\065\uffee\001\002\000\004\061\uffef\001\002\000\010" +
    "\002\ufffb\052\ufffb\053\ufffb\001\002\000\046\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\051\uffde\052\203\053\007\054\uffde\056\uffde\057" +
    "\uffde\061\uffde\062\uffde\064\uffde\001\002\000\004\004\254" +
    "\001\002\000\042\004\032\005\225\006\223\007\221\010" +
    "\026\011\034\012\027\013\023\014\041\051\022\054\220" +
    "\056\226\057\uffd0\061\200\062\uffe9\064\025\001\002\000" +
    "\004\004\136\001\002\000\012\036\211\057\uffd6\060\210" +
    "\066\020\001\002\000\004\057\206\001\002\000\046\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\051\uffde\052\203\053\007\054\uffde\056" +
    "\uffde\057\uffde\061\uffde\062\uffde\064\uffde\001\002\000\042" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\051\uffe0\054\uffe0\056\uffe0\057\uffe0" +
    "\061\uffe0\062\uffe0\064\uffe0\001\002\000\004\004\136\001" +
    "\002\000\030\004\032\010\026\011\034\012\027\013\023" +
    "\014\041\051\022\057\uffd0\060\uffd0\061\031\064\025\001" +
    "\002\000\006\057\uffd7\060\213\001\002\000\004\004\136" +
    "\001\002\000\004\057\uffd9\001\002\000\004\057\uffd8\001" +
    "\002\000\004\062\253\001\002\000\042\004\032\005\225" +
    "\006\223\007\221\010\026\011\034\012\027\013\023\014" +
    "\041\051\022\054\220\056\226\057\uffd0\061\200\062\uffe9" +
    "\064\025\001\002\000\024\004\032\010\026\011\034\012" +
    "\027\013\023\014\041\051\022\057\uffd0\064\025\001\002" +
    "\000\004\064\242\001\002\000\004\057\241\001\002\000" +
    "\004\057\240\001\002\000\044\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\051" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\061\uffe7\062\uffe7" +
    "\064\uffe7\001\002\000\004\057\237\001\002\000\004\064" +
    "\227\001\002\000\024\004\032\010\026\011\034\012\027" +
    "\013\023\014\041\051\022\057\uffd0\064\025\001\002\000" +
    "\004\057\231\001\002\000\024\004\032\010\026\011\034" +
    "\012\027\013\023\014\041\051\022\057\uffd0\064\025\001" +
    "\002\000\004\057\233\001\002\000\024\004\032\010\026" +
    "\011\034\012\027\013\023\014\041\051\022\064\025\065" +
    "\uffd0\001\002\000\004\065\235\001\002\000\040\004\032" +
    "\005\225\006\223\007\221\010\026\011\034\012\027\013" +
    "\023\014\041\051\022\054\220\056\226\057\uffd0\061\200" +
    "\064\025\001\002\000\044\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\051\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\061\uffe3\062\uffe3\064" +
    "\uffe3\001\002\000\044\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\051\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\061\uffe1\062\uffe1\064\uffe1" +
    "\001\002\000\044\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\051\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\061\uffe2\062\uffe2\064\uffe2\001" +
    "\002\000\044\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\051\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\061\uffe8\062\uffe8\064\uffe8\001\002" +
    "\000\024\004\032\010\026\011\034\012\027\013\023\014" +
    "\041\051\022\064\025\065\uffd0\001\002\000\004\065\244" +
    "\001\002\000\040\004\032\005\225\006\223\007\221\010" +
    "\026\011\034\012\027\013\023\014\041\051\022\054\220" +
    "\056\226\057\uffd0\061\200\064\025\001\002\000\044\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\051\uffe4\054\uffe4\055\246\056\uffe4\057" +
    "\uffe4\061\uffe4\062\uffe4\064\uffe4\001\002\000\040\004\032" +
    "\005\225\006\223\007\221\010\026\011\034\012\027\013" +
    "\023\014\041\051\022\054\220\056\226\057\uffd0\061\200" +
    "\064\025\001\002\000\044\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\051\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\061\uffe5\062\uffe5\064" +
    "\uffe5\001\002\000\004\057\251\001\002\000\044\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\051\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6" +
    "\061\uffe6\062\uffe6\064\uffe6\001\002\000\004\062\uffea\001" +
    "\002\000\052\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\061\uffeb" +
    "\062\uffeb\064\uffeb\001\002\000\006\057\uffda\060\260\001" +
    "\002\000\004\057\256\001\002\000\046\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\051\uffde\052\203\053\007\054\uffde\056\uffde\057\uffde" +
    "\061\uffde\062\uffde\064\uffde\001\002\000\042\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\051\uffdf\054\uffdf\056\uffdf\057\uffdf\061\uffdf\062" +
    "\uffdf\064\uffdf\001\002\000\004\004\254\001\002\000\004" +
    "\057\uffdb\001\002\000\004\002\001\001\002\000\010\004" +
    "\ufff0\057\ufff0\061\273\001\002\000\006\052\266\062\uffdc" +
    "\001\002\000\004\062\272\001\002\000\004\004\254\001" +
    "\002\000\004\057\270\001\002\000\006\052\266\062\uffdc" +
    "\001\002\000\004\062\uffdd\001\002\000\006\004\ufff1\057" +
    "\ufff1\001\002\000\006\052\266\062\uffdc\001\002\000\004" +
    "\062\275\001\002\000\006\004\ufff2\057\ufff2\001\002\000" +
    "\004\002\uffff\001\002\000\006\057\ufff9\060\302\001\002" +
    "\000\004\057\301\001\002\000\010\002\ufffc\052\ufffc\053" +
    "\ufffc\001\002\000\006\004\277\057\ufff8\001\002\000\004" +
    "\057\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\012\002\007\003\003\004\005\007\004\001" +
    "\001\000\002\001\001\000\004\005\277\001\001\000\010" +
    "\003\275\004\005\007\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\014\010\011\021\013\001\001" +
    "\000\004\012\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\166" +
    "\021\013\001\001\000\002\001\001\000\020\022\034\023" +
    "\035\024\032\025\037\026\023\027\036\030\027\001\001" +
    "\000\014\024\163\025\037\026\023\027\036\030\027\001" +
    "\001\000\014\024\162\025\037\026\023\027\036\030\027" +
    "\001\001\000\002\001\001\000\014\024\160\025\037\026" +
    "\023\027\036\030\027\001\001\000\002\001\001\000\014" +
    "\024\157\025\037\026\023\027\036\030\027\001\001\000" +
    "\002\001\001\000\020\023\151\024\032\025\037\026\023" +
    "\027\036\030\027\032\155\001\001\000\004\031\141\001" +
    "\001\000\002\001\001\000\014\024\137\025\037\026\023" +
    "\027\036\030\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\024\041" +
    "\025\037\026\023\027\036\030\027\001\001\000\002\001" +
    "\001\000\014\024\105\025\037\026\023\027\036\030\027" +
    "\001\001\000\014\024\104\025\037\026\023\027\036\030" +
    "\027\001\001\000\014\024\103\025\037\026\023\027\036" +
    "\030\027\001\001\000\014\024\102\025\037\026\023\027" +
    "\036\030\027\001\001\000\014\024\101\025\037\026\023" +
    "\027\036\030\027\001\001\000\014\024\100\025\037\026" +
    "\023\027\036\030\027\001\001\000\014\024\077\025\037" +
    "\026\023\027\036\030\027\001\001\000\014\024\076\025" +
    "\037\026\023\027\036\030\027\001\001\000\014\024\075" +
    "\025\037\026\023\027\036\030\027\001\001\000\014\024" +
    "\074\025\037\026\023\027\036\030\027\001\001\000\014" +
    "\024\073\025\037\026\023\027\036\030\027\001\001\000" +
    "\014\024\072\025\037\026\023\027\036\030\027\001\001" +
    "\000\014\024\071\025\037\026\023\027\036\030\027\001" +
    "\001\000\014\024\070\025\037\026\023\027\036\030\027" +
    "\001\001\000\014\024\067\025\037\026\023\027\036\030" +
    "\027\001\001\000\014\024\066\025\037\026\023\027\036" +
    "\030\027\001\001\000\014\024\065\025\037\026\023\027" +
    "\036\030\027\001\001\000\014\024\064\025\037\026\023" +
    "\027\036\030\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\133\025\037\026\023\027\036\030\027\001" +
    "\001\000\014\024\132\025\037\026\023\027\036\030\027" +
    "\001\001\000\014\024\131\025\037\026\023\027\036\030" +
    "\027\001\001\000\014\024\130\025\037\026\023\027\036" +
    "\030\027\001\001\000\014\024\127\025\037\026\023\027" +
    "\036\030\027\001\001\000\014\024\126\025\037\026\023" +
    "\027\036\030\027\001\001\000\014\024\125\025\037\026" +
    "\023\027\036\030\027\001\001\000\014\024\124\025\037" +
    "\026\023\027\036\030\027\001\001\000\014\024\123\025" +
    "\037\026\023\027\036\030\027\001\001\000\014\024\122" +
    "\025\037\026\023\027\036\030\027\001\001\000\014\024" +
    "\121\025\037\026\023\027\036\030\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\136\021\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\023" +
    "\151\024\032\025\037\026\023\027\036\030\027\032\150" +
    "\001\001\000\002\001\001\000\016\023\145\024\032\025" +
    "\037\026\023\027\036\030\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\023\151\024\032\025\037\026\023\027\036\030" +
    "\027\032\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\200\015\201\001\001\000\004\017\254\001\001\000" +
    "\024\012\223\013\215\014\216\023\221\024\032\025\037" +
    "\026\023\027\036\030\027\001\001\000\006\020\204\021" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\200\015\206\001\001\000\002\001\001\000\006\020" +
    "\214\021\203\001\001\000\020\022\211\023\035\024\032" +
    "\025\037\026\023\027\036\030\027\001\001\000\002\001" +
    "\001\000\006\020\213\021\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\012\223\013" +
    "\251\014\216\023\221\024\032\025\037\026\023\027\036" +
    "\030\027\001\001\000\016\023\247\024\032\025\037\026" +
    "\023\027\036\030\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\227\024\032\025\037" +
    "\026\023\027\036\030\027\001\001\000\002\001\001\000" +
    "\016\023\231\024\032\025\037\026\023\027\036\030\027" +
    "\001\001\000\002\001\001\000\016\023\233\024\032\025" +
    "\037\026\023\027\036\030\027\001\001\000\002\001\001" +
    "\000\022\012\223\014\235\023\221\024\032\025\037\026" +
    "\023\027\036\030\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\242\024\032\025\037\026\023\027\036\030\027\001\001" +
    "\000\002\001\001\000\022\012\223\014\244\023\221\024" +
    "\032\025\037\026\023\027\036\030\027\001\001\000\002" +
    "\001\001\000\022\012\223\014\246\023\221\024\032\025" +
    "\037\026\023\027\036\030\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\200\015\256\001\001\000\002\001\001\000\004\017" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\264\001\001\000\002\001\001\000" +
    "\004\017\266\001\001\000\002\001\001\000\004\016\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\302\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Parser(InputStream in) {
        this(new Lexer(in));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARGS ::= EXP 
            {
              Args RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARGS ::= EXP COMMA ARGS 
            {
              Args RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args(exp, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARRS ::= 
            {
              Arrs RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ARRS ::= LB EXP RB ARRS 
            {
              Arrs RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arrs arrs = (Arrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arrs(exp, arrs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // UEXPS ::= BIT_NOT EXPS 
            {
              UniOpExps RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UniOp op = (UniOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UniOpExps(op, exps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UEXPS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // UEXPS ::= NOT EXPS 
            {
              UniOpExps RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UniOp op = (UniOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UniOpExps(op, exps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UEXPS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // UEXPS ::= MINUS EXPS 
            {
              UniOpExps RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Term op = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			RESULT = new UniOpExps(new UniOp("-", op.line, op.col), exps);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UEXPS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // UEXPS ::= DOUBLE_MINUS EXPS 
            {
              UniOpExps RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UniOp op = (UniOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UniOpExps(op, exps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UEXPS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // UEXPS ::= DOUBLE_PLUS EXPS 
            {
              UniOpExps RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UniOp op = (UniOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = new UniOpExps(op, exps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UEXPS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BEXPS ::= EXPS MOD EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BEXPS ::= EXPS DIV EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BEXPS ::= EXPS MULT EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BEXPS ::= EXPS MINUS EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Term op = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BinOpExps(a, new BinOp("-", op.line, op.col), b);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BEXPS ::= EXPS PLUS EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BEXPS ::= EXPS SR EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BEXPS ::= EXPS SL EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BEXPS ::= EXPS NLT EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BEXPS ::= EXPS NGT EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BEXPS ::= EXPS LT EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BEXPS ::= EXPS GT EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BEXPS ::= EXPS EQ EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BEXPS ::= EXPS NE EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BEXPS ::= EXPS BIT_AND EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BEXPS ::= EXPS BIT_XOR EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BEXPS ::= EXPS BIT_OR EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BEXPS ::= EXPS AND EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BEXPS ::= EXPS OR EXPS 
            {
              BinOpExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exps a = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOpExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEXPS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AEXPS ::= LVAL SL_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AEXPS ::= LVAL SR_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AEXPS ::= LVAL OR_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AEXPS ::= LVAL XOR_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AEXPS ::= LVAL AND_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AEXPS ::= LVAL MOD_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AEXPS ::= LVAL DIV_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AEXPS ::= LVAL MULT_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AEXPS ::= LVAL MINUS_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AEXPS ::= LVAL PLUS_ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpAssign op = (OpAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpAssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AEXPS ::= LVAL ASSIGN EXPS 
            {
              AssignExps RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LvalExps a = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assign op = (Assign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps b = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignExps(a, op, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AEXPS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LVAL ::= ID DOT ID 
            {
              LvalExps RESULT =null;
		int strtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int strtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IDNode strt = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDNode field = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DotExps(strt, field); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LVAL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LVAL ::= ID ARRS 
            {
              LvalExps RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arrs arrs = (Arrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrExps(id, arrs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LVAL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPS ::= INT 
            {
              Exps RESULT =null;
		int cstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CstNode cst = (CstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntExps(cst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPS ::= ID LP ARGS RP 
            {
              Exps RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncExps(id, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPS ::= LP EXPS RP 
            {
              Exps RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPS ::= UEXPS 
            {
              Exps RESULT =null;
		int uexpsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexpsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UniOpExps uexps = (UniOpExps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = uexps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPS ::= BEXPS 
            {
              Exps RESULT =null;
		int bexpsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bexpsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BinOpExps bexps = (BinOpExps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bexps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPS ::= AEXPS 
            {
              Exps RESULT =null;
		int aexpsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aexpsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignExps aexps = (AssignExps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aexps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPS ::= LVAL 
            {
              Exps RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LvalExps lval = (LvalExps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lval; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= 
            {
              Exp RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXPS 
            {
              Exp RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exp(exps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INIT ::= LC ARGS RC 
            {
              Init RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArgInit(args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INIT ::= EXP 
            {
              Init RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpInit(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VAR ::= VAR LB INT RB 
            {
              Var RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CstNode len = (CstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Var(var, len); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VAR ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECS ::= VAR 
            {
              Decs RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Decs(new VarDef(var), null);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECS ::= VAR ASSIGN INIT 
            {
              Decs RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Init init = (Init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Decs(new VarDef(var,init), null);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECS ::= VAR COMMA DECS 
            {
              Decs RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Decs(new VarDef(var), decs); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECS ::= VAR ASSIGN INIT COMMA DECS 
            {
              Decs RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Init init = (Init)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Decs(new VarDef(var,init), decs);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SDECS ::= ID 
            {
              SDecs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecs(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SDECS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SDECS ::= ID COMMA SDECS 
            {
              SDecs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sdecsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sdecsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SDecs sdecs = (SDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecs(id, sdecs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SDECS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SDEFS ::= 
            {
              SDefs RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SDEFS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SDEFS ::= TYPE SDECS SEMI SDEFS 
            {
              SDefs RESULT =null;
		int sdecsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sdecsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SDecs sdecs = (SDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sdefsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sdefsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SDefs sdefs = (SDefs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new SDefs(sdecs, sdefs);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SDEFS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFS ::= 
            {
              Defs RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFS ::= STSPEC SDECS SEMI DEFS 
            {
              Defs RESULT =null;
		int stsPecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stsPecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StSpec stsPec = (StSpec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sdecsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sdecsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SDecs sdecs = (SDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Defs defs = (Defs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new StructDefs(stsPec, sdecs, defs);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFS ::= TYPE DECS SEMI DEFS 
            {
              Defs RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Defs defs = (Defs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDefs(decs, defs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STMT ::= BREAK SEMI 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Stmt.newBreak(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STMT ::= CONT SEMI 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Stmt.newCont(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STMT ::= FOR LP EXP SEMI EXP SEMI EXP RP STMT 
            {
              Stmt RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp inc = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ForStmt(init, test, inc, stmt);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STMT ::= IF LP EXP RP STMT 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt then = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new IfStmt(id, exp, then);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STMT ::= IF LP EXP RP STMT ELSE STMT 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt then = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt elseStmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new IfStmt(id, exp, then, elseStmt);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMT ::= RETURN EXP SEMI 
            {
              Stmt RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RetStmt(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMT ::= STMTBLOCK 
            {
              Stmt RESULT =null;
		int stmtBlockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtBlockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtBlock stmtBlock = (StmtBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BlockStmt(stmtBlock); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STMT ::= EXP SEMI 
            {
              Stmt RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpStmt(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STMTS ::= 
            {
              Stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMTS ::= STMT STMTS 
            {
              Stmts RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmts stmts = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stmts(stmt, stmts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STMTBLOCK ::= LC DEFS STMTS RC 
            {
              StmtBlock RESULT =null;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Defs defs = (Defs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmts stmts = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StmtBlock(defs, stmts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTBLOCK",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAS ::= 
            {
              Paras RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAS ::= TYPE ID 
            {
              Paras RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Paras(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAS ::= TYPE ID COMMA PARAS 
            {
              Paras RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Paras paras = (Paras)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Paras(id, paras); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC ::= ID LP PARAS RP 
            {
              Func RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Paras paras = (Paras)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Func(id, paras); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STSPEC ::= STRUCT ID 
            {
              StSpec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StSpec(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STSPEC",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STSPEC ::= STRUCT LC SDEFS RC 
            {
              StSpec RESULT =null;
		int sdefsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sdefsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SDefs sdefs = (SDefs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StSpec(sdefs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STSPEC",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STSPEC ::= STRUCT ID LC SDEFS RC 
            {
              StSpec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sdefsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sdefsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SDefs sdefs = (SDefs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StSpec(id, sdefs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STSPEC",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXTVARS ::= 
            {
              ExtVars RESULT =null;
		
            RESULT = null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTVARS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXTVARS ::= VAR 
            {
              ExtVars RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExtVars(new VarDef(var));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTVARS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXTVARS ::= VAR ASSIGN INIT 
            {
              ExtVars RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Init init = (Init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExtVars(new VarDef(var, init));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTVARS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXTVARS ::= VAR COMMA EXTVARS 
            {
              ExtVars RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int othersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int othersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExtVars others = (ExtVars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExtVars(new VarDef(var), others);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTVARS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXTVARS ::= VAR ASSIGN INIT COMMA EXTVARS 
            {
              ExtVars RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Init init = (Init)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int othersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int othersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExtVars others = (ExtVars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			RESULT = new ExtVars(new VarDef(var, init), others);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTVARS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SEXTVARS ::= 
            {
              SExtVars RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEXTVARS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SEXTVARS ::= ID 
            {
              SExtVars RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExtVars(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEXTVARS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SEXTVARS ::= ID COMMA SEXTVARS 
            {
              SExtVars RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IDNode id = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int svarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int svarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SExtVars svars = (SExtVars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExtVars(id, svars); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEXTVARS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXTDEF ::= TYPE FUNC STMTBLOCK 
            {
              ExtDef RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Func func = (Func)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtBlock block = (StmtBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncExtDef(func, block); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEF",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXTDEF ::= STSPEC SEXTVARS SEMI 
            {
              ExtDef RESULT =null;
		int specleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int specright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StSpec spec = (StSpec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int svarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int svarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SExtVars svars = (SExtVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructExtDef(spec, svars); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEF",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXTDEF ::= TYPE EXTVARS SEMI 
            {
              ExtDef RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExtVars vars = (ExtVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarExtDef(vars); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEF",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXTDEFS ::= 
            {
              ExtDefs RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEFS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXTDEFS ::= EXTDEF EXTDEFS 
            {
              ExtDefs RESULT =null;
		int edefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int edefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExtDef edef = (ExtDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int othersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int othersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExtDefs others = (ExtDefs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExtDefs(edef, others); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXTDEFS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= EXTDEFS 
            {
              Program RESULT =null;
		int extdefsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int extdefsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExtDefs extdefs = (ExtDefs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(extdefs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

